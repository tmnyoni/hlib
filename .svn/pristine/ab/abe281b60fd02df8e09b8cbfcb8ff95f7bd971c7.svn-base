#pragma once

#ifdef HLIB_EXPORTS

#define HLIB_API __declspec(dllexport)
#pragma comment(lib, "sqlcipher32.lib")
#else
#define HLIB_API __declspec(dllimport)
#endif

#include <string>
#include <vector>
#include <map>

namespace hlib {
	class HLIB_API hbase {
	public:

		struct database_file_ {
			std::string name;
			std::string password;
		};

		enum class column_type_ {
			text_,
			integer_,
			float_,
			blob_
		};

		enum class constraint_ {
			not_null,
			null
		};

		struct column_ {
			std::string name;
			column_type_ type = column_type_::text_;
			constraint_ constraint = constraint_::null;
		};

		class columns_ {
		private:
			std::vector<column_> items;
		public:

			std::vector<column_> get() {
				return items;
			}

			void add(const column_& col) {
				items.push_back(col);
			}
		};

		struct table_ {
			std::string name;
			std::vector<column_> columns;
			std::string primary_key;
		};

		class tables_ {
		private:
			std::vector<table_> items;
		public:
			std::vector<table_> get() {
				return items;
			}

			void add(const table_& table) {
				items.push_back(table);
			}
		};

		bool connect(const database_file_& file,
			tables_& tables,
			std::string& error);

		struct field_ {
			std::string name;
			std::string item;
		};

		class row_ {
		private:
			std::vector<field_> fields;
		public:
			std::vector<field_> get() {
				return fields;
			}
			void add(const field_& field) {
				fields.push_back(field);
			}
		};

		bool insert_row(row_& row,
			const std::string& table_name,
			std::string& error);

		bool delete_row(field_& field,
			const std::string& table_name,
			std::string& error);

		bool count_records(field_& field,
			const std::string& table_name,
			size_t& records,
			std::string& error);

		bool count_records(const std::string& table_name,
			size_t& records,
			std::string& error);

		bool get_record(row_& rows,
			const std::string& table_name,
			std::string& error);

		bool get_records(std::vector<row_>& rows,
			const std::string& table_name,
			std::string& error);

		bool update_record(row_& row,
			const std::string& table_name,
			std::string& error);

		hbase();
		~hbase();
	private:
		class hbase_impl;
		hbase_impl& d_;
	};
};