#pragma once

#ifdef HLIB_EXPORTS
#define HLIB_API __declspec(dllexport)
#else
#define HLIB_API __declspec(dllimport)
#endif

#include "sqlite3.h"
#include "picosha2.h"
#include <vector>
#include <map>

namespace hlib {
	class HLIB_API hbase {
	public:

		struct database_file_ {
			std::string name;
			std::string password;
		};

		enum class column_type_ {
			text_,
			integer_,
			float_,
			blob_
		};

		enum class constraint_ {
			not_null,
			null
		};

		struct column_ {
			std::string name;
			column_type_ type = column_type_::text_;
			constraint_ constraint = constraint_::null;
		};

		class columns_ {
		private:
			std::vector<column_> items;
		public:

			std::vector<column_> get() {
				return items;
			}

			void add(const column_& col) {
				items.push_back(col);
			}
		};

		struct table_ {
			std::string name;
			std::vector<column_> columns;
			std::string primary_key;
		};

		class tables_ {
		private:
			std::vector<table_> items;
		public:
			std::vector<table_> get() {
				return items;
			}

			void add(const table_& table) {
				items.push_back(table);
			}
		};

		bool connect(const database_file_& file,
			tables_& tables,
			std::string& error);

		struct row_ {
			std::vector<std::string> field_name;
			std::vector<std::string> field_data;
		};

		class rows_ {
		private:
			std::vector<row_> items;
		public:
			std::vector<row_> get() {
				return items;
			}

			void add(const row_& row) {
				items.push_back(row);
			}
		};

		bool insert(rows_& rows, 
			const std::string& table_name,
			std::string& error);

		hbase();
		~hbase();
	private:
		class hbase_impl;
		hbase_impl& d_;
	};
};